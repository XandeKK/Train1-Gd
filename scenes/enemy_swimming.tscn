[gd_scene load_steps=13 format=3 uid="uid://bciorqh3u4gxu"]

[ext_resource type="PackedScene" uid="uid://x0kl5aoq4nax" path="res://scenes/enemy.tscn" id="1_71aah"]
[ext_resource type="Texture2D" uid="uid://vft6tvl1sc1d" path="res://assets/Enemies/enemySwimming_4.png" id="2_57gpl"]
[ext_resource type="Texture2D" uid="uid://dbmgk268a2pco" path="res://assets/Enemies/enemySwimming_1.png" id="3_fnj08"]
[ext_resource type="Texture2D" uid="uid://cnypn7wp21cn1" path="res://assets/Enemies/enemySwimming_2.png" id="4_smg81"]
[ext_resource type="Texture2D" uid="uid://pgdbr3aw8nfl" path="res://assets/Enemies/enemySwimming_3.png" id="5_so7bl"]

[sub_resource type="GDScript" id="GDScript_brisb"]
script/source = "extends CharacterBody2D

@export var speed := 100.0
@export var health := 1
@export var distance := 200
@export var can_take_damage := true

var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var direction := 1
var initial_position : float
var end_position : float

func _ready():
	initial_position = position.x
	end_position = initial_position - distance

func _physics_process(delta):
	if position.x > initial_position or position.x < end_position or is_on_wall():
		$AnimatedSprite2D.flip_h = direction > 0
		direction = -direction

	velocity.x = speed * direction
	
	move_and_slide()

func take_damage(value: int) -> void:
	health -= value
	if health <= 0:
		$AnimationPlayer.play(\"Dead\")
		set_physics_process(false)
		$CollisionShape2D.queue_free()
		await $AnimationPlayer.animation_finished
		queue_free()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_csicf"]
size = Vector2(32, 31)

[sub_resource type="Animation" id="Animation_kcl7h"]
resource_name = "Swimming"
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Swimming"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("AnimationPlayer:speed_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.4]
}

[sub_resource type="Animation" id="Animation_vcmtr"]
resource_name = "Dead"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Dead"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath(".:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_oknm7"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Swimming"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("AnimationPlayer:speed_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.4]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath(".:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_qkiws"]
_data = {
"Dead": SubResource("Animation_vcmtr"),
"RESET": SubResource("Animation_oknm7"),
"Swimming": SubResource("Animation_kcl7h")
}

[sub_resource type="SpriteFrames" id="SpriteFrames_tsh1p"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_57gpl")
}],
"loop": true,
"name": &"Dead",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_fnj08")
}, {
"duration": 1.0,
"texture": ExtResource("4_smg81")
}, {
"duration": 1.0,
"texture": ExtResource("5_so7bl")
}, {
"duration": 1.0,
"texture": ExtResource("4_smg81")
}],
"loop": true,
"name": &"Swimming",
"speed": 5.0
}]

[node name="EnemySwimming" instance=ExtResource("1_71aah")]
collision_mask = 4
script = SubResource("GDScript_brisb")
distance = 200
can_take_damage = true

[node name="CollisionShape2D" parent="." index="0"]
position = Vector2(6, -0.5)
shape = SubResource("RectangleShape2D_csicf")

[node name="AnimationPlayer" parent="." index="1"]
autoplay = "Swimming"
speed_scale = 0.4
libraries = {
"": SubResource("AnimationLibrary_qkiws")
}

[node name="AnimatedSprite2D" parent="." index="2"]
sprite_frames = SubResource("SpriteFrames_tsh1p")
animation = &"Swimming"
